new way to convert pic into gray
img=cv2.imread("path",0)

CHAPTER 8


import cv2
import numpy as np

def stackImages(scale, imgArray):
    rows = len(imgArray)
    cols = len(imgArray[0])
    rowsAvailable = isinstance(imgArray[0], list)
    width = imgArray[0][0].shape[1]
    height = imgArray[0][0].shape[0]
    if rowsAvailable:
        for x in range(0, rows):
            for y in range(0, cols):
                if imgArray[x][y].shape[:2] == imgArray[0][0].shape[:2]:
                    imgArray[x][y] = cv2.resize(imgArray[x][y], (0, 0), None, scale, scale)
                else:
                    imgArray[x][y] = cv2.resize(imgArray[x][y], (imgArray[0][0].shape[1], imgArray[0][0].shape[0]),
                                                None, scale, scale)
                if len(imgArray[x][y].shape) == 2: imgArray[x][y] = cv2.cvtColor(imgArray[x][y], cv2.COLOR_GRAY2BGR)
        imageBlank = np.zeros((height, width, 3), np.uint8)
        hor = [imageBlank] * rows
        hor_con = [imageBlank] * rows
        for x in range(0, rows):
            hor[x] = np.hstack(imgArray[x])
        ver = np.vstack(hor)
    else:
        for x in range(0, rows):
            if imgArray[x].shape[:2] == imgArray[0].shape[:2]:
                imgArray[x] = cv2.resize(imgArray[x], (0, 0), None, scale, scale)
            else:
                imgArray[x] = cv2.resize(imgArray[x], (imgArray[0].shape[1], imgArray[0].shape[0]), None, scale, scale)
            if len(imgArray[x].shape) == 2: imgArray[x] = cv2.cvtColor(imgArray[x], cv2.COLOR_GRAY2BGR)
        hor = np.hstack(imgArray)
        ver = hor
    return ver

def getContours(imgoriginal):
    contours,hierarchy=cv2.findContours(imgoriginal,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_NONE)
    for cnt in contours:
        area=cv2.contourArea(cnt)
        print(area)
        cv2.drawContours(imgcontour,cnt,-1,(255,0,0),3)
        if area>500:
            cv2.drawContours(imgcontour,cnt,-1,(255,0,0),3)
            peri=cv2.arcLength(cnt,True)
            print(peri)
            approx=cv2.approxPolyDP(cnt,0.02*peri,True)
            print(len(approx))
            objcor=len(approx)
            x, y, w, h=cv2.boundingRect(approx)

            if objcor==3:objecttype="tri"
            elif objcor==4:
                aspratio=w/float(h)
                if aspratio>0.95 and aspratio<1.05:objecttype="Square"
                else:objecttype="rectangle"
            elif objcor>4:objecttype="Circle"
            else:objecttype="none"

            cv2.rectangle(imgcontour,(x,y),(x+w,y+h),(0,255,0),2)
            cv2.putText(imgcontour,objecttype,
                        (x+(w//2)-10,y+(h//2)-10),cv2.FONT_HERSHEY_COMPLEX,0.9,
                        (0,0,0),2)





path= 'resources/OIP.jpg'
imgoriginal=cv2.imread(path)
imggray=cv2.imread(path,0)
imgcontour=imgoriginal.copy()

imgblack=np.zeros_like(imgoriginal)
imgblur=cv2.GaussianBlur(imggray,(7,7),1)
imgcanny=cv2.Canny(imgblur,50,50)
getContours(imgcanny)
imgstack=stackImages(0.8,([imgoriginal,imggray,imgblur],
                          [imgcanny,imgcontour,imgblur]))



cv2.imshow("stack",imgstack)
cv2.waitKey(0)


CHAPTER 9




import cv2

faceCascade = cv2.CascadeClassifier("resources/haarcascade_frontalface_default.xml")
img = cv2.imread('resources/ahmed.jpg')
imgGray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

faces = faceCascade.detectMultiScale(imgGray, 1.1, 4)

for (x, y, w, h) in faces:
    cv2.rectangle(img, (x, y), (x + w, y + h), (255, 0, 0), 2)

cv2.imshow("Result", img)
cv2.waitKey(0)
